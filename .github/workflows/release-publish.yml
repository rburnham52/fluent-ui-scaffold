name: Release Publishing

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release tag to publish (e.g., v1.0.0)'
        required: true
        type: string
      test_mode:
        description: 'Test mode - publishes with preview version'
        required: false
        type: boolean
        default: false

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      assembly-version: ${{ steps.version.outputs.assembly-version }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version from tag
      id: version
      run: |
        # Extract version from release tag
        if [[ "${{ github.event_name }}" == "release" ]]; then
          TAG_VERSION="${{ github.event.release.tag_name }}"
        else
          TAG_VERSION="${{ github.event.inputs.release_tag }}"
        fi
        
        if [[ $TAG_VERSION == v* ]]; then
          VERSION="${TAG_VERSION#v}"
        else
          VERSION="$TAG_VERSION"
        fi
        
        # Extract base version for assembly version (numeric only)
        BASE_VERSION=$(echo "$VERSION" | sed 's/-.*//')
        ASSEMBLY_VERSION="${BASE_VERSION}.0"
        
        # Add preview suffix for testing - use format compatible with .NET version requirements
        if [[ "${{ github.event.inputs.test_mode }}" == "true" ]] || [[ "${{ github.event.release.prerelease }}" == "true" ]] || [[ "${{ github.event.release.body }}" == *"[TEST]"* ]]; then
          # Use format: major.minor.build-preview-YYYYMMDD-HHMMSS
          # This ensures compatibility with .NET version string requirements and readability
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          VERSION="${VERSION}-preview-${TIMESTAMP}"
          echo "ðŸ§ª Test mode enabled - using preview version"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "assembly-version=$ASSEMBLY_VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
        echo "Assembly version: $ASSEMBLY_VERSION"

  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    needs: extract-version
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x

    - name: Validate release is from main branch
      run: |
        # Ensure the release is from main branch
        if [[ "${{ github.event_name }}" == "release" ]]; then
          RELEASE_BRANCH=$(git branch -r --contains ${{ github.sha }} | grep origin/main || echo "")
          if [[ -z "$RELEASE_BRANCH" ]]; then
            echo "Error: Release must be created from main branch"
            exit 1
          fi
          echo "âœ… Release is from main branch"
        else
          echo "âœ… Manual workflow dispatch - skipping branch validation"
        fi

    - name: Restore dependencies
      run: dotnet restore

    - name: Build Projects
      run: |
        # Build projects first to ensure DLLs exist before packing
        # Use separate properties to override Directory.Build.props defaults
        dotnet build src/FluentUIScaffold.Core --configuration Release --no-restore -p:PackageVersion=${{ needs.extract-version.outputs.version }} -p:AssemblyVersion=${{ needs.extract-version.outputs.assembly-version }} -p:FileVersion=${{ needs.extract-version.outputs.assembly-version }} -p:InformationalVersion=${{ needs.extract-version.outputs.version }}
        dotnet build src/FluentUIScaffold.Playwrite --configuration Release --no-restore -p:PackageVersion=${{ needs.extract-version.outputs.version }} -p:AssemblyVersion=${{ needs.extract-version.outputs.assembly-version }} -p:FileVersion=${{ needs.extract-version.outputs.assembly-version }} -p:InformationalVersion=${{ needs.extract-version.outputs.version }}

    - name: Pack Projects
      run: |
        # Pack projects using the pre-built assemblies
        # Use separate properties to override Directory.Build.props defaults
        dotnet pack src/FluentUIScaffold.Core --configuration Release --no-build --output ./artifacts -p:PackageVersion=${{ needs.extract-version.outputs.version }} -p:AssemblyVersion=${{ needs.extract-version.outputs.assembly-version }} -p:FileVersion=${{ needs.extract-version.outputs.assembly-version }} -p:InformationalVersion=${{ needs.extract-version.outputs.version }}
        dotnet pack src/FluentUIScaffold.Playwrite --configuration Release --no-build --output ./artifacts -p:PackageVersion=${{ needs.extract-version.outputs.version }} -p:AssemblyVersion=${{ needs.extract-version.outputs.assembly-version }} -p:FileVersion=${{ needs.extract-version.outputs.assembly-version }} -p:InformationalVersion=${{ needs.extract-version.outputs.version }}

    - name: Validate Package Versions
      run: |
        echo "Validating package versions..."
        for package in ./artifacts/*.nupkg; do
          echo "Checking package: $package"
          # Extract version from package name
          PACKAGE_VERSION=$(basename "$package" | sed -n 's/.*\.\([0-9]\+\.[0-9]\+\.[0-9]\+.*\)\.nupkg/\1/p')
          echo "Package version: $PACKAGE_VERSION"
          # Compare with extracted version
          if [[ "$PACKAGE_VERSION" != "${{ needs.extract-version.outputs.version }}" ]]; then
            echo "Error: Package version mismatch!"
            echo "Package: $PACKAGE_VERSION"
            echo "Expected: ${{ needs.extract-version.outputs.version }}"
            exit 1
          fi
        done
        echo "âœ… All package versions validated"

    - name: Upload packages for publishing
      uses: actions/upload-artifact@v4
      with:
        name: release-packages
        path: ./artifacts/
        retention-days: 1

  publish-nuget:
    name: Publish to NuGet.org
    runs-on: ubuntu-latest
    needs: [extract-version, validate-release]
    if: needs.validate-release.result == 'success'
    environment: 
      name: nuget-production
      url: https://www.nuget.org/packages?q=FluentUIScaffold
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: ./artifacts

    - name: Publish to NuGet.org
      run: |
        echo "Publishing packages to NuGet.org..."
        for package in ./artifacts/*.nupkg; do
          echo "Publishing package: $package"
          dotnet nuget push "$package" \
            --source https://api.nuget.org/v3/index.json \
            --api-key ${{ secrets.NUGET_API_KEY }} \
            --skip-duplicate
        done
        echo "âœ… All packages published to NuGet.org"

    - name: Update Release Notes
      uses: actions/github-script@v7
      with:
        script: |
          const version = '${{ needs.extract-version.outputs.version }}';
          
          // Update the existing release with publishing information
          if (context.eventName === 'release') {
            try {
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: context.payload.release.id,
                body: `${context.payload.release.body}
                
                ## âœ… Published to NuGet.org
                
                **Version:** ${version}
                **Published at:** ${new Date().toISOString()}
                
                ### Packages Published:
                - FluentUIScaffold.Core
                - FluentUIScaffold.Playwrite
                
                ### Installation:
                \`\`\`bash
                dotnet add package FluentUIScaffold.Core --version ${version}
                \`\`\`
                
                Packages are now available on [NuGet.org](https://www.nuget.org/packages?q=FluentUIScaffold)`
              });
              console.log('Release notes updated successfully');
            } catch (error) {
              console.log('Could not update release notes:', error.message);
            }
          }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-github-packages:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [extract-version, validate-release]
    if: needs.validate-release.result == 'success'
    environment: 
      name: github-packages
      url: https://github.com/${{ github.repository }}/packages
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Download packages
      uses: actions/download-artifact@v4
      with:
        name: release-packages
        path: ./artifacts

    - name: Publish to GitHub Packages
      run: |
        echo "Publishing packages to GitHub Packages..."
        for package in ./artifacts/*.nupkg; do
          echo "Publishing package: $package"
          dotnet nuget push "$package" \
            --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json \
            --api-key ${{ secrets.GITHUB_TOKEN }} \
            --skip-duplicate
        done
        echo "âœ… All packages published to GitHub Packages" 