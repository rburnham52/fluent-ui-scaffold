name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  build-and-test:
    name: Build and Test (.NET ${{ matrix.dotnet-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['6.0.x', '7.0.x', '8.0.x']
        include:
          - dotnet-version: '6.0.x'
            target-framework: 'net6.0'
          - dotnet-version: '7.0.x'
            target-framework: 'net7.0'
          - dotnet-version: '8.0.x'
            target-framework: 'net8.0'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build
      run: dotnet build --no-restore --configuration Release --framework ${{ matrix.target-framework }}

    - name: Install Playwright browsers
      run: |
        cd tests/FluentUIScaffold.Playwright.Tests
        dotnet build --configuration Release --framework ${{ matrix.target-framework }}
        npx playwright@1.42.0 install chromium

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release --framework ${{ matrix.target-framework }} --collect:"XPlat Code Coverage" --results-directory ./coverage/ --filter "FullyQualifiedName!~SampleApp.Tests"

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: ${{ matrix.target-framework }}
        name: codecov-${{ matrix.target-framework }}

    - name: Generate coverage summary (framework-only)
      run: |
        dotnet tool install --global dotnet-reportgenerator-globaltool
        echo "PATH=$PATH:$HOME/.dotnet/tools" >> $GITHUB_ENV
        reportgenerator \
          -reports:./coverage/**/coverage.cobertura.xml \
          -targetdir:./coverage/report \
          -reporttypes:'TextSummary;Html' \
          -assemblyfilters:+FluentUIScaffold.Core;+FluentUIScaffold.Playwright;-*.Tests;-*Sample*

    - name: Enforce coverage threshold (min 70% lines)
      run: |
        if [ ! -f ./coverage/report/Summary.txt ]; then echo "Summary.txt not found"; cat ./coverage; exit 1; fi
        LINE_COV=$(grep -E "Line coverage" ./coverage/report/Summary.txt | head -n1 | sed -E 's/.*Line coverage: ([0-9]+).*/\1/')
        echo "Line coverage summary: ${LINE_COV}%"
        MIN_COV=70
        if [ -z "$LINE_COV" ]; then echo "Failed to parse line coverage"; cat ./coverage/report/Summary.txt || true; exit 1; fi
        if [ "$LINE_COV" -lt "$MIN_COV" ]; then echo "Coverage ${LINE_COV}% is below threshold ${MIN_COV}%"; exit 1; fi

  security:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security analysis
      run: dotnet list package --vulnerable

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x

    - name: Run code analysis
      run: dotnet build --configuration Release --verbosity minimal

    - name: Run style analysis
      run: dotnet format --verify-no-changes                                                                                                                                                                