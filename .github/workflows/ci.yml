name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'beta'
        type: choice
        options:
        - beta
        - preview
        - alpha

env:
  DOTNET_VERSION: '8.0.x'
  NUGET_PACKAGE_NAME: 'FluentUIScaffold'

jobs:
  build-and-test:
    name: Build and Test (.NET ${{ matrix.dotnet-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        dotnet-version: ['6.0.x', '7.0.x', '8.0.x']
        include:
          - dotnet-version: '6.0.x'
            target-framework: 'net6.0'
          - dotnet-version: '7.0.x'
            target-framework: 'net7.0'
          - dotnet-version: '8.0.x'
            target-framework: 'net8.0'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release --framework ${{ matrix.target-framework }}

    - name: Install Playwright browsers
      run: |
        dotnet build --configuration Release --framework ${{ matrix.target-framework }}
        cd tests/FluentUIScaffold.Playwright.Tests
        dotnet test --configuration Release --framework ${{ matrix.target-framework }} --logger "console;verbosity=minimal" --filter "FullyQualifiedName~DoesNotExist" || true
        dotnet run --project . --configuration Release --framework ${{ matrix.target-framework }} --no-build -- install || echo "Browser installation completed"

    - name: Test
      run: dotnet test --no-build --verbosity normal --configuration Release --framework ${{ matrix.target-framework }} --collect:"XPlat Code Coverage" --results-directory ./coverage/

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/**/coverage.cobertura.xml
        flags: ${{ matrix.target-framework }}
        name: codecov-${{ matrix.target-framework }}

  package:
    name: Create NuGet Package
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Extract version from tag
      id: version
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
        else
          echo "version=0.3.0-beta" >> $GITHUB_OUTPUT
          echo "Using default version: 0.3.0-beta"
        fi

    - name: Pack Core Package
      run: dotnet pack src/FluentUIScaffold.Core/FluentUIScaffold.Core.csproj --configuration Release --output ./packages/ -p:Version=${{ steps.version.outputs.version }}

    - name: Pack Playwright Package
      run: dotnet pack src/FluentUIScaffold.Playwright/FluentUIScaffold.Playwright.csproj --configuration Release --output ./packages/ -p:Version=${{ steps.version.outputs.version }}

    - name: Upload package artifacts
      uses: actions/upload-artifact@v4
      with:
        name: nuget-packages
        path: ./packages/

  manual-approval:
    name: Manual Approval for Release
    runs-on: ubuntu-latest
    needs: package
    if: github.event_name == 'release'
    environment:
      name: release-approval

    steps:
    - name: Wait for manual approval
      run: |
        echo "Manual approval required before publishing to NuGet"
        echo "Release: ${{ github.event.release.name }}"
        echo "Tag: ${{ github.event.release.tag_name }}"
        echo "Please review the build artifacts and approve the release"

  publish-nuget:
    name: Publish to NuGet
    runs-on: ubuntu-latest
    needs: [package, manual-approval]
    if: github.event_name == 'release'

    steps:
    - name: Download package artifacts
      uses: actions/download-artifact@v4
      with:
        name: nuget-packages

    - name: Publish to NuGet
      run: dotnet nuget push "*.nupkg" --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json

  security:
    name: Security Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security analysis
      run: dotnet list package --vulnerable

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Run code analysis
      run: dotnet build --configuration Release --verbosity minimal

    - name: Run style analysis
      run: dotnet format --verify-no-changes                                                            